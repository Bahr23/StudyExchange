import datetime

import telegram
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, InputMediaPhoto, \
    InputMediaDocument

from menu import Menu
from models import *
from core import *
from menu import *

@db_session
def start(update, context):
    if update.message.chat.id > 0:
        user = get_user(update.message.from_user.id)
        mymenu = Menu()
        reply_markup = mymenu.get_menu(tag='#main#0')
        if user:
            if user.status == 'banned':
                context.bot.send_message(chat_id=user.user_id, text=BANNED_TEXT, parse_mode=telegram.ParseMode.HTML)
                return
            if 'queue' in context.user_data.keys():
                if context.user_data['queue']:
                    current_queue(update, context, user)
                    return
            text = '–†–∞–¥ —Å–Ω–æ–≤–∞ –í–∞—Å –≤–∏–¥–µ—Ç—å, ' + user.first_name + '! –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ –í–∞—à–µ–º—É <a href="https://t.me/alexmustdie">–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É</a> üë®‚Äçüíª'
            context.bot.send_message(chat_id=update.effective_chat.id, text=text, reply_markup=reply_markup[0], parse_mode=telegram.ParseMode.HTML)
        else:
            user = update.message.from_user
            first_name = user.first_name if user.first_name else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
            last_name = user.last_name if user.last_name else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
            username = user.username if user.username else str(user.id)
            age = '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
            education = '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
            city = '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
            registration_date = str(datetime.date.today()).replace('-', '.')
            last_order = '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
            orders_number = '0'
            workers_orders = 0
            rate = 0
            points = 0
            balance = 0

            newuser = User(user_id=user.id, status='user', first_name=first_name, last_name=last_name,
                           username=username, age=age, education=education, city=city, registration_date=registration_date,
                           last_order=last_order, orders_number=orders_number, workers_orders=workers_orders,
                           rate=rate, points=points, balance=balance)
            context.user_data.update({'queue': False})
            text = '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ StudyX! –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ –í–∞—à–µ–º—É <a href="https://t.me/alexmustdie">–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É</a> üë®‚Äçüíª'
            context.bot.send_message(chat_id=update.effective_chat.id, text=text, reply_markup=reply_markup[0], parse_mode=telegram.ParseMode.HTML)


def all_messages(update, context):
    if update.message.chat.id > 0:
        user = get_user(update.message.from_user.id)
        if user:
            if user.status == 'banned':
                context.bot.send_message(chat_id=user.user_id, text=BANNED_TEXT)
                return
            if 'queue' in context.user_data.keys():
                if context.user_data['queue']:

                    ans = None

                    if context.user_data['queue_docs'] != '':
                        ans = context.user_data['queue_docs']
                        context.user_data['queue_docs'] = ''

                    if context.user_data['queue_name'] != 'edit_order':
                        current_queue(update, context, user)

                    queue(update, context, user, ans)
                    return
            context.user_data.update({'last_message': update.message.text})
            mymenu = Menu()
            reply_markup = mymenu.get_menu(tag='#main#0')
            text = user.first_name + ', —è –Ω–µ –∑–Ω–∞—é –∫–∞–∫ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üòî'
            context.bot.send_message(chat_id=update.effective_chat.id, text=text, reply_markup=reply_markup[0])
        else:
            start(update, context)


def get_docs(update, context):
    if update.message.chat.id > 0:
        user = get_user(update.message.from_user.id)
        if user:
            if user.status == 'banned':
                context.bot.send_message(chat_id=user.user_id, text=BANNED_TEXT)
                return
            if 'queue' in context.user_data.keys():
                if context.user_data['queue']:
                    if list(context.user_data['queue_list'][context.user_data['queue_position']].keys())[0] == 'docs':
                        if update.message.photo:
                            text = '–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ" üëá'
                            fid = update.message.photo[0].file_id

                            context.user_data['queue_docs'] += fid + ', '


                            # context.bot.send_photo(chat_id=MEDIA_ID, photo=update.message.photo[0].file_id)
                        if update.message.document:
                            text = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–ª–æ–∂–µ–Ω–∏–µ, –∫–∞–∫ —Ñ–æ—Ç–æ, –∞ –Ω–µ —Ñ–∞–π–ª—ã!'
                            # context.bot.send_document(chat_id=MEDIA_ID, document=update.message.document.file_id)

                        context.bot.send_message(chat_id=update.effective_chat.id, text=text)
                    else:
                        queue(update, context, user)
                        return
            else:
                mymenu = Menu()
                reply_markup = mymenu.get_menu(tag='#main#0')
                text = user.first_name + ', —è –Ω–µ –∑–Ω–∞—é –∫–∞–∫ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üòî'
                context.bot.send_message(chat_id=update.effective_chat.id, text=text, reply_markup=reply_markup[0])
                context.user_data.update({'last_message': update.message.text})

        else:
            start(update, context)


def stop(update, context):
    if update.message.chat.id > 0:
        context.user_data.update({'queue': False})
        context.bot.send_message(chat_id=update.effective_chat.id, text='–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –æ—á–µ—Ä–µ–¥—å.')


@db_session
def profile(update, context):
    if update.message.chat.id > 0:
        context.user_data.update({'queue': False})
    if update.message.chat.id > 0:
        user = get_user(update.message.from_user.id)
        if user:
            if user.status == 'banned':
                context.bot.send_message(chat_id=user.user_id, text=BANNED_TEXT)
                return
            if 'queue' in context.user_data.keys():
                if context.user_data['queue']:
                    current_queue(update, context, user)
                    return
            text = '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile <i>id_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</i>'
            if context.args:
                user = User.get(id=int(context.args[0]))
                if user:
                    text = get_profile(user.id)
                else:
                    text = '–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω üòî'
            context.bot.send_message(chat_id=update.effective_chat.id, text=text, parse_mode=telegram.ParseMode.HTML)
        else:
            start(update, context)


def myprofile(update, context):
    if update.message.chat.id > 0:
        context.user_data.update({'queue': False})
    if update.message.chat.id > 0:
        user = get_user(update.message.from_user.id)
        if user:
            if user.status == 'banned':
                context.bot.send_message(chat_id=user.user_id, text=BANNED_TEXT)
                return
            if 'queue' in context.user_data.keys():
                if context.user_data['queue']:
                    current_queue(update, context, user)
                    return
            text = get_profile(user.id)

            mymenu = Menu()
            buttons = [InlineKeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data='@' + str(user.id) + '@profile@list')]

            if not user.wanted:
                buttons.append(InlineKeyboardButton('–•–æ—á—É —Å—Ç–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º üëã', callback_data='@' + str(user.id) + '@want'))

            markup = mymenu.build_menu(buttons=buttons, n_cols=1, header_buttons=None, footer_buttons=None)
            reply_markup = InlineKeyboardMarkup(markup)

            context.bot.send_message(chat_id=update.effective_chat.id, text=text, parse_mode=telegram.ParseMode.HTML, reply_markup=reply_markup)
        else:
            start(update, context)


def menu(update, context):
    if update.message.chat.id > 0:
        context.user_data.update({'queue': False})
    if update.message.chat.id > 0:
        user = get_user(update.message.from_user.id)
        if user:
            if user.status == 'banned':
                context.bot.send_message(chat_id=user.user_id, text=BANNED_TEXT)
                return
            if 'queue' in context.user_data.keys():
                if context.user_data['queue']:
                    current_queue(update, context, user)
                    return
            mymenu = Menu()
            reply_markup = mymenu.get_menu(tag='#main#0')
            context.bot.send_message(chat_id=update.effective_chat.id, text=reply_markup[1], reply_markup=reply_markup[0], parse_mode=telegram.ParseMode.HTML)
        else:
            start(update, context)
    else:
        mymenu = Menu()
        reply_markup = mymenu.get_menu(tag='#chat#0')
        context.bot.send_message(chat_id=update.effective_chat.id, text=reply_markup[1], reply_markup=reply_markup[0])


def new_order(update, context):
    if update.message.chat.id > 0:
        context.user_data.update({'queue': False})
    if update.message.chat.id > 0:
        user = get_user(update.message.from_user.id)
        if user:
            if user.status == 'banned':
                context.bot.send_message(chat_id=user.user_id, text=BANNED_TEXT)
                return
            if 'queue' in context.user_data.keys():
                if context.user_data['queue']:
                    current_queue(update, context, user)
                    return
            queue_list = [
                {'subject': '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ üëá', 'menu': "#subject#0"},
                {'type': '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ üëá', 'menu': '#type#0'},
                {'description': '–£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã üëá', 'menu': None},
                {'deadline': '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ üëá\n'
                             '\np.s. –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å –≤ –æ–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ, '
                             '—Ç–æ —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã (–ø–æ –ú–æ—Å–∫–≤–µ).', 'menu': '#deadline#0'},
                {'price': '–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ—é —Ü–µ–Ω—É –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ üëá', 'menu': '#price#0'},
                {'faculty': '–£–∫–∞–∂–∏—Ç–µ –í–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç üëá', 'menu': '#faculty#0'},
                {'departament': '–£–∫–∞–∂–∏—Ç–µ –í–∞—à—É –∫–∞—Ñ–µ–¥—Ä—É üëá', 'menu': '#departament#0'},
                {'teacher': '–£–∫–∞–∂–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è üëá', 'menu': '#teacher#0'},
                {'docs': '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, –∏ –Ω–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ" üëá', 'menu': '#done#0'},
                {'promo': '–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥, –µ—Å–ª–∏ –æ–Ω —É –í–∞—Å –µ—Å—Ç—å, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" üëá', 'menu': '#promo#0'},
            ]
            context.user_data.update({
                'queue': True,
                'queue_name': 'new_order',
                'queue_finish': '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.'
                                ' –í–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –æ–Ω –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω üëå',
                'queue_list': queue_list,
                'queue_position': 0,
                'queue_answers': [],
                'queue_docs': '',
                'last_queue_message': ''})

            current_queue(update, context, user)
        else:
            start(update, context)


@db_session
def my_orders(update, context):
    if update.message.chat.id > 0:
        context.user_data.update({'queue': False})
    if update.message.chat.id > 0:
        user = get_user(update.message.from_user.id)
        if user:
            if user.status == 'banned':
                context.bot.send_message(chat_id=user.user_id, text=BANNED_TEXT)
                return
            if 'queue' in context.user_data.keys():
                if context.user_data['queue']:
                    current_queue(update, context, user)
                    return
            orders = select(o for o in Order if o.user_id == user.id)
            if len(orders):
                text = '' # –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n
                buttons = []
                for order in list(orders):
                    text += '#' + str(order.id) + ' - ' + order.subject + ' (' + order.status + ')\n'
                    buttons.append(InlineKeyboardButton('–ó–∞–∫–∞–∑ #' + str(order.id), callback_data="@" + str(order.id)))

                mymenu = Menu()
                markup = mymenu.build_menu(buttons=buttons, n_cols=1, header_buttons=None, footer_buttons=None)
                context.bot.send_message(chat_id=update.effective_chat.id, text=text, reply_markup=InlineKeyboardMarkup(markup))
            else:
                text = '–£ –í–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ üòî'
                context.bot.send_message(chat_id=update.effective_chat.id, text=text)
        else:
            start(update, context)


@db_session
def del_order(update, context):
    if update.message.chat.id > 0:
        context.user_data.update({'queue': False})
    if update.message.chat.id > 0:
        user = get_user(update.message.from_user.id)
        if user:
            if user.status == 'banned':
                context.bot.send_message(chat_id=user.user_id, text=BANNED_TEXT)
                return
            if 'queue' in context.user_data.keys():
                if context.user_data['queue']:
                    current_queue(update, context, user)
                    return

            if context.args:
                try:
                    id = int(context.args[0])
                    text = delete_order(id)
                except Exception as e:
                    text = '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /delorder <i>id_–∑–∞–∫–∞–∑–∞</i>!'
            else:
                text = '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /delorder <i>id_–∑–∞–∫–∞–∑–∞</i>!'

            context.bot.send_message(chat_id=update.effective_chat.id, text=text, parse_mode=telegram.ParseMode.HTML)
        else:
            start(update, context)


@db_session
def order(update, context):
    if update.message.chat.id > 0:
        context.user_data.update({'queue': False})
    if update.message.chat.id > 0:
        user = get_user(update.message.from_user.id)
        if user:
            if user.status == 'banned':
                context.bot.send_message(chat_id=user.user_id, text=BANNED_TEXT)
                return
            if 'queue' in context.user_data.keys():
                if context.user_data['queue']:
                    current_queue(update, context, user)
                    return
            reply_markup = InlineKeyboardMarkup([])
            if context.args:
                try:
                    id = int(context.args[0])
                    order = Order.get(id=id)
                    text = get_order(id)

                    if order.user_id != user.id and user.status != 'admin':
                        text = False
                    if not text:
                        text = '–ó–∞–∫–∞–∑ #' + str(id) + ' –Ω–µ –Ω–∞–π–¥–µ–Ω üòî'
                    else:
                        workers = order.worker_id
                        mymenu = Menu()
                        reply_markup = mymenu.order_buttons(id, workers)
                        if order:
                            if order.docs != '–í–ª–æ–∂–µ–Ω–∏—è –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã':
                                text += '\n–í–ª–æ–∂–µ–Ω–∏—è:\n' + order.docs
                except Exception as e:
                    text = '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /order <i>id_–∑–∞–∫–∞–∑–∞</i>!'
            else:
                text = '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /order <i>id_–∑–∞–∫–∞–∑–∞</i>!'
            context.bot.send_message(chat_id=update.effective_chat.id, text=text, reply_markup=reply_markup, parse_mode=telegram.ParseMode.HTML)
        else:
            start(update, context)


def balance(update, context):
    if update.message.chat.id > 0:
        context.user_data.update({'queue': False})
    if update.message.chat.id > 0:
        user = get_user(update.message.from_user.id)
        if user:
            if user.status == 'banned':
                context.bot.send_message(chat_id=user.user_id, text=BANNED_TEXT)
                return
            if 'queue' in context.user_data.keys():
                if context.user_data['queue']:
                    current_queue(update, context, user)
                    return
            text = '–í–∞—à –±–∞–ª–∞–Ω—Å: ' + str(user.balance) + ' —Ä—É–±.'

            mymenu = Menu()
            buttons = [InlineKeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å', callback_data='@' + str(user.id) + '@deposit'),
                       InlineKeyboardButton('–í—ã–≤–µ—Å—Ç–∏', callback_data='@' + str(user.id) + '@withdraw'),
                       InlineKeyboardButton('–ò—Å—Ç–æ—Ä–∏—è', callback_data='@' + str(user.id) + '@balancehistory')]

            markup = mymenu.build_menu(buttons=buttons, n_cols=1, header_buttons=None, footer_buttons=None)
            reply_markup = InlineKeyboardMarkup(markup)

            context.bot.send_message(chat_id=update.effective_chat.id, text=text, reply_markup=reply_markup)
        else:
            start(update, context)


def faq(update, context):
    if update.message.chat.id > 0:
        context.user_data.update({'queue': False})
    if update.message.chat.id > 0:
        user = get_user(update.message.from_user.id)
        if user:
            if user.status == 'banned':
                context.bot.send_message(chat_id=user.user_id, text=BANNED_TEXT)
                return
            if 'queue' in context.user_data.keys():
                if context.user_data['queue']:
                    current_queue(update, context, user)
                    return

            text = "1. –í—ã –æ—Ñ–æ—Ä–º–ª—è–µ—Ç–µ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–π —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ (/neworder)." \
                   "\n2. –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏ —Å–ø—É—Å—Ç—è –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è " \
                   "<a href='https://t.me/StudyExchangePosts/'>–Ω–∞ –∫–∞–Ω–∞–ª–µ</a> —Å –∑–∞–∫–∞–∑–∞–º–∏." \
                   "\n3. –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –í–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞, –æ —á—ë–º –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è " \
                   "–≤ –±–æ—Ç–µ." \
                   "\n4. –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –í—ã –≤—ã–±–µ—Ä–µ—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–∑–¥–∞—Å—Ç –æ–±—â–∏–π —á–∞—Ç, –≥–¥–µ –í—ã " \
                   " –¥–æ–ª–∂–Ω—ã –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –æ–± —É—Å–ª–æ–≤–∏—è—Ö —Ä–∞–±–æ—Ç—ã." \
                   "\n5. –î–∞–ª–µ–µ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É –≤ –ø–æ–ª–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ. –≠—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç —É–¥–µ—Ä–∂–∞–Ω—ã –Ω–∞ —Å—á—ë—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ " \
                   "–±–∏—Ä–∂–∏, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –ø–æ–ª—É—á–∏—Ç –∫ –Ω–∏–º –¥–æ—Å—Ç—É–ø –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞." \
                   "\n6. –ö–æ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞ –≥–æ—Ç–æ–≤–∞, –í—ã –ø—Ä–æ–≤–µ—Ä—è–µ—Ç–µ –µ—ë –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –æ–≥–æ–≤–æ—Ä—ë–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π. " \
                   "–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –æ–ø–ª–∞—Ç—É, –∞ –í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å –µ–≥–æ —Ä–∞–±–æ—Ç—É." \
                   '\n\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ –í–∞—à–µ–º—É <a href="https://t.me/alexmustdie">–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É</a>.'

            context.bot.send_message(chat_id=update.effective_chat.id, text=text, parse_mode=telegram.ParseMode.HTML)
        else:
            start(update, context)
