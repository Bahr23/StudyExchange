import telegram
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto

from menu import Menu
from models import *
from pay import *


CHANNEL_ID = '-1001361464885'
MEDIA_ID = '-1001412307468'
BANNED_TEXT = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.'

@db_session
def get_user(id):
    try:
        user = User.get(user_id=id)
        return user
    except Exception as e:
        return False


def get_name(user, id=False):
    if user:
        name = str(user.id)
        if user.first_name != '–Ω–µ —É–∫–∞–∑–∞–Ω–æ':
            name = user.first_name
            if user.last_name != '–Ω–µ —É–∫–∞–∑–∞–Ω–æ':
                name += ' ' + user.last_name
        else:
            if user.username != '–Ω–µ —É–∫–∞–∑–∞–Ω–æ':
                name = user.username
        if id:
            name = '<b>{} (id{})</b>'.format(name, user.id)
        return name
    return 'Unknown'


@db_session
def get_profile(id):
    user = User.get(id=id)
    if user:
        name = get_name(user)

        if user.status == 'user':
            status = '–∫–ª–∏–µ–Ω—Ç'
            rate = ''

        if user.status == 'worker':
            status = '–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'
            rate = '–†–µ–π—Ç–∏–Ω–≥: ' + str(user.rate)

        if user.status == 'admin':
            status = '–º–µ–Ω–µ–¥–∂–µ—Ä'
            rate = ''

        # if user.username:
        #     username = '–ù–∏–∫–Ω–µ–π–º: @' + user.username + '\n'
        # else:
        #     username = ''

        if user.last_order != '–Ω–µ —É–∫–∞–∑–∞–Ω–æ':
            last_order_date = user.last_order.split('.')
            last_order_date = last_order_date[2] + '.' + last_order_date[1] + '.' + last_order_date[0]
            last_order = '\n–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞: ' + last_order_date + '\n'
        else:
            last_order = ''

        reg = user.registration_date.split('.')
        reg = reg[2] + '.' + reg[1] + '.' + reg[0]

        text = '<b>{name} (id{id})</b>\n\n–°—Ç–∞—Ç—É—Å: {status}\n–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ' \
               '{registration_date}\n\n–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {education}\n–ì–æ—Ä–æ–¥: {city}\n–í–æ–∑—Ä–∞—Å—Ç: ' \
               '{age}\n\n–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã: {orders_number}{last_order}\n{rate}' \
               '\n'.format(name=name, id=user.id, status=status, registration_date=reg,
                                                                education=user.education, city=user.city, age=user.age,
                                                                orders_number=user.orders_number,
                                                                last_order=last_order, rate=rate)
        return text
    else:
        return False


@db_session
def get_order(id):
    o = Order.get(id=id)
    if o:
        emoji_status = {
            '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ': 'üîé',
            '–ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è': 'üì¢',
            '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤—ã–±—Ä–∞–Ω': 'üë®‚Äçüéì',
            '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã': '‚è≥',
            '–û–ø–ª–∞—á–µ–Ω': 'üí∞',
            '–ó–∞–≤–µ—Ä—à—ë–Ω': '‚úÖ',
        }

        try:
            status = '{st} {emoji}'.format(st=o.status, emoji=emoji_status[o.status])
        except Exception as e:
            status = o.status

        extra_info = ', '.join([x for x in (o.faculty, o.departament, o.teacher) if x != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']) + '\n'
        return '<b>–ó–∞–∫–∞–∑ #{id} ({subject})</b>\n{status}\n\n{type}, {deadline}, {price}\n{extra_info}{description}'.format(
            id=o.id,
            subject=o.subject,
            status=status,
            type=o.type,
            deadline=o.deadline.lower(),
            price=o.price.lower(),
            extra_info=extra_info,
            description=o.description)
    else:
        return False


@db_session
def delete_order(o_id):
    order = Order.get(id=o_id)
    if order:
        delete(o for o in Order if o.id == o_id)
        return '–ó–∞–∫–∞–∑ #' + str(o_id) + ' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.'
    else:
        return '–ó–∞–∫–∞–∑ #' + str(o_id) + ' –Ω–µ –Ω–∞–π–¥–µ–Ω.'


def queue(update, context, user, ans=None):
    if update.callback_query:
        query = update.callback_query
        if not ans:
            ans = query.data
    else:
        if not ans:
            ans = update.message.text
    answer = {list(context.user_data['queue_list'][context.user_data['queue_position']].keys())[0]: ans}
    context.user_data['queue_answers'].append(answer)
    context.user_data['queue_position'] += 1
    if context.user_data['queue_position'] < len(context.user_data['queue_list']):
        current_queue(update, context, user)
    else:
        finish_queue(context.user_data['queue_name'], context.user_data['queue_answers'], update, context)
        context.user_data['queue'] = False
        if context.user_data['queue_finish']:
            text = context.user_data['queue_finish']
            mymenu = Menu()
            reply_markup = mymenu.get_menu(tag='#main#0')
            context.bot.send_message(chat_id=update.effective_chat.id, text=text, reply_markup=reply_markup[0])


def current_queue(update, context, user):
    if (context.user_data['queue_name'] == 'edit_order' or context.user_data['queue_name'] == 'edit_profile') and context.user_data['queue_position'] == 1:
        return
    text = list(context.user_data['queue_list'][context.user_data['queue_position']].values())[0]
    qmenu = context.user_data['queue_list'][context.user_data['queue_position']]['menu']

    if qmenu:
        mymenu = Menu()
        reply_markup = mymenu.get_menu(tag=qmenu)[0]
    else:
        reply_markup = None
    if context.user_data['last_queue_message'] == text:
        return
    context.bot.send_message(chat_id=update.effective_chat.id, text=text, reply_markup=reply_markup)
    context.user_data.update({'last_queue_message': text})



@db_session
def finish_queue(name, answers, update=None, context=None):
    mymenu = Menu()
    if update.callback_query:
        query = update.callback_query
        user = get_user(update.callback_query.message.chat.id)
    else:
        user = get_user(update.message.from_user.id)

    if name == "new_order":
        subject = list(answers[0].values())[0]
        order_type = list(answers[1].values())[0]
        description = list(answers[2].values())[0]
        deadline = list(answers[3].values())[0]
        price = list(answers[4].values())[0]
        faculty = list(answers[5].values())[0]
        departament = list(answers[6].values())[0]
        teacher = list(answers[7].values())[0]
        docs = list(answers[8].values())[0]
        promo = list(answers[9].values())[0]

        coupon = Coupons.get(name=promo)

        if not coupon:
            promo = '0'

        try:
            docs = docs.split(', ')
            media_group = []
            for d in docs:
                if d != '':
                    media_group.append(InputMediaPhoto(media=d.replace(',', '')))
            url = 'https://t.me/StudyExchangeMedia/' + str(context.bot.send_media_group(chat_id=MEDIA_ID, media=media_group)[0].message_id)
        except Exception as e:
            url = '–í–ª–æ–∂–µ–Ω–∏—è –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã'

        order = Order(user_id=user.id, status='–í –æ–±—Ä–∞–±–æ—Ç–∫–µ', subject=subject, type=order_type, faculty=faculty,
                      departament=departament, teacher=teacher, description=description,
                      deadline=deadline, price=price, worker_id='', docs=url, promo=promo)

        # # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # text = '–í–∞—à –∑–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω'
        # context.bot.send_message(chat_id=user.user_id, text=text)

        # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
        orders = select(o for o in Order)
        id = int(list(orders)[-1].id)
        text = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ' + get_name(user, True) + ' —Å–æ–∑–¥–∞–ª –∑–∞–∫–∞–∑ #' + str(id) + '\n'
        text += get_order(id)
        mymenu = Menu()
        buttons = [InlineKeyboardButton('–û–¥–æ–±—Ä–∏—Ç—å', callback_data='@' + str(id) + '@push'),
                   InlineKeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data='@' + str(id) + '@edit@list'),
                   InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data='@' + str(id) + '@del')]

        markup = mymenu.build_menu(buttons=buttons, n_cols=1, header_buttons=None, footer_buttons=None)
        reply_markup = InlineKeyboardMarkup(markup)

        admins = list(select(u for u in User if u.status == 'admin'))

        if order.docs:
            text += '\n–í–ª–æ–∂–µ–Ω–∏—è:\n' + order.docs

        for admin in admins:
            context.bot.send_message(chat_id=admin.user_id, text=text, reply_markup=reply_markup, parse_mode=telegram.ParseMode.HTML)

    if name == "edit_order":
        myorder = Order.get(id=context.user_data['edit_order'])
        key = list(answers[0].keys())[0]
        value = list(answers[0].values())[0]
        exec('myorder.' + key + " = '" + value + "'")
        context.user_data.update({'edit_order': None})

    if name == "edit_profile":
        user = User.get(id=context.user_data['edit_profile'])
        key = list(answers[0].keys())[0]
        value = list(answers[0].values())[0]
        if key == 'age':
            try:
                age = int(value)
                if age < 1:
                    raise
                exec('user.' + key + " = '" + value + "'")

            except Exception as e:
                text = "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è!"
                context.user_data.update({'queue_finish': False})
                context.bot.send_message(chat_id=update.effective_chat.id, text=text)

        if key == 'education':
            try:
                education = str(value)
                for s in education:
                    if not s.isalpha() and s != '-':
                        raise
                exec('user.' + key + " = '" + value + "'")

            except Exception as e:
                text = '–í –ø–æ–ª–µ "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ" –º–æ–≥—É—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã!'
                context.user_data.update({'queue_finish': False})
                context.bot.send_message(chat_id=update.effective_chat.id, text=text)

        if key == 'city':
            try:
                city = str(value)
                for s in city:
                    if not s.isalpha() and s != '-':
                        raise
                exec('user.' + key + " = '" + value + "'")

            except Exception as e:
                text = '–í –ø–æ–ª–µ "–ì–æ—Ä–æ–¥" –º–æ–≥—É—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã!'
                context.user_data.update({'queue_finish': False})
                context.bot.send_message(chat_id=update.effective_chat.id, text=text)

    if name == "balance":
        try:
            sum = int(answers[0]['sum'])
            if sum > 0:
                text = '–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É üëâ '
                link = paylink(user.id, sum)
                text += link
            else:
                text = "–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è!"
        except Exception as e:
            text = '–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!'
        context.bot.send_message(chat_id=update.effective_chat.id, text=text)

    if name == "withdraw":
        try:
            sum = int(answers[0]['sum'])
            bank = answers[1]['bank']
            card = answers[2]['card']
            if sum <= int(user.balance):
                sum2 = sum * 0.97
                text = '<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ' + get_name(user) + '[' + str(user.id) + ']' + ' –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—ã–≤–æ–¥:</b>\n' \
                                                                                        '1. –°—É–º–º–∞ –±–µ–∑ –∫–æ–º–∏—Å—Å–∏ - ' + str(sum) + \
                       ' —Ä—É–±.\n  - –°—É–º–º–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏ - ' + str(sum2) + ' —Ä—É–±\n2. –ë–∞–Ω–∫ - ' + str(bank) + '\n3. –†–µ–∫–≤–∏–∑–∏—Ç—ã - ' + str(card)

                buttons = [InlineKeyboardButton('–û–¥–æ–±—Ä–∏—Ç—å', callback_data='@' + str(user.user_id) + '@withdrawconfirm@' + str(sum)),
                           InlineKeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å', callback_data='@' + str(user.user_id) + '@withdrawdone@' + str(sum))]

                markup = mymenu.build_menu(buttons=buttons, n_cols=1, header_buttons=None, footer_buttons=None)
                reply_markup = InlineKeyboardMarkup(markup)

                admins = list(select(u for u in User if u.status == 'admin'))
                for admin in admins:
                    context.bot.send_message(chat_id=admin.user_id, text=text, parse_mode=telegram.ParseMode.HTML, reply_markup=reply_markup)
                context.bot.send_message(chat_id=update.effective_chat.id,
                                         text='–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ <a href="https://t.me/alexmustdie">–º–µ–Ω–µ–¥–∂–µ—Ä–∞</a> ‚è≥', parse_mode=telegram.ParseMode.HTML)
            else:
                text = '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.'
                context.bot.send_message(chat_id=update.effective_chat.id, text=text)

        except Exception as e:
            text = '–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!'
